// Code generated by MockGen. DO NOT EDIT.
// Source: Go_cinema_reconstructed/model (interfaces: MovieUseCase)

// Package mock_model is a generated GoMock package.
package mock_model

import (
	model "Go_cinema_reconstructed/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMovieUseCase is a mock of MovieUseCase interface.
type MockMovieUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockMovieUseCaseMockRecorder
}

// MockMovieUseCaseMockRecorder is the mock recorder for MockMovieUseCase.
type MockMovieUseCaseMockRecorder struct {
	mock *MockMovieUseCase
}

// NewMockMovieUseCase creates a new mock instance.
func NewMockMovieUseCase(ctrl *gomock.Controller) *MockMovieUseCase {
	mock := &MockMovieUseCase{ctrl: ctrl}
	mock.recorder = &MockMovieUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieUseCase) EXPECT() *MockMovieUseCaseMockRecorder {
	return m.recorder
}

// CreateMovie mocks base method.
func (m *MockMovieUseCase) CreateMovie(arg0 *model.MovieReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovie", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMovie indicates an expected call of CreateMovie.
func (mr *MockMovieUseCaseMockRecorder) CreateMovie(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockMovieUseCase)(nil).CreateMovie), arg0)
}

// DeleteMovie mocks base method.
func (m *MockMovieUseCase) DeleteMovie(arg0 string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovie", arg0)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMovie indicates an expected call of DeleteMovie.
func (mr *MockMovieUseCaseMockRecorder) DeleteMovie(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovie", reflect.TypeOf((*MockMovieUseCase)(nil).DeleteMovie), arg0)
}

// GetAllMovies mocks base method.
func (m *MockMovieUseCase) GetAllMovies() ([]*model.MovieRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMovies")
	ret0, _ := ret[0].([]*model.MovieRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMovies indicates an expected call of GetAllMovies.
func (mr *MockMovieUseCaseMockRecorder) GetAllMovies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMovies", reflect.TypeOf((*MockMovieUseCase)(nil).GetAllMovies))
}

// GetMovieByID mocks base method.
func (m *MockMovieUseCase) GetMovieByID(arg0 string) (*model.MovieRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieByID", arg0)
	ret0, _ := ret[0].(*model.MovieRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieByID indicates an expected call of GetMovieByID.
func (mr *MockMovieUseCaseMockRecorder) GetMovieByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieByID", reflect.TypeOf((*MockMovieUseCase)(nil).GetMovieByID), arg0)
}

// GetWatchedMovies mocks base method.
func (m *MockMovieUseCase) GetWatchedMovies(arg0 []string) ([]*model.MovieRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWatchedMovies", arg0)
	ret0, _ := ret[0].([]*model.MovieRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWatchedMovies indicates an expected call of GetWatchedMovies.
func (mr *MockMovieUseCaseMockRecorder) GetWatchedMovies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWatchedMovies", reflect.TypeOf((*MockMovieUseCase)(nil).GetWatchedMovies), arg0)
}

// UpdateMovie mocks base method.
func (m *MockMovieUseCase) UpdateMovie(arg0 string, arg1 *model.MovieReq) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovie", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMovie indicates an expected call of UpdateMovie.
func (mr *MockMovieUseCaseMockRecorder) UpdateMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovie", reflect.TypeOf((*MockMovieUseCase)(nil).UpdateMovie), arg0, arg1)
}
